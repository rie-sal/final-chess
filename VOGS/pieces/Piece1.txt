package chessgame;

import java.util.LinkedList;
import VOGS.ChessBoard;

public abstract class Piece {
    // Attributes for position and piece data
    int xPos;
    int yPos;
    boolean isWhite;
    String pieceType;
    LinkedList<Piece> pieceList;
    int xPixelPos;
    
    int yPixelPos;

    // Attributes for the color of the piece (for simplicity)
    public String color;

    /**
     * Constructor to initialize the piece with basic attributes.
     */
    public Piece(int x, int y, boolean isWhite, String type, LinkedList<Piece> pieceList, String color) {
        this.xPos = x;
        this.yPos = y;
        this.xPixelPos = x * 64;  // Assuming 64x64 pixel grid
        this.yPixelPos = y * 64;
        this.isWhite = isWhite;
        this.pieceType = type;
        this.pieceList = pieceList;
        this.color = color;  // Color for GUI or game logic
        pieceList.add(this);
    }

    /**
     * Moves a piece to the desired destination and checks for capturing pieces.
     */
    public void move(int xDest, int yDest) {
        Piece targetPiece = getPieceAt(xDest * 64, yDest * 64, pieceList);
        if (targetPiece != null) {
            if (targetPiece.isWhite != this.isWhite) {
                targetPiece.kill();
            } else {
                // Prevent moving to a square occupied by a friendly piece
                return;
            }
        }
        this.xPos = xDest;
        this.yPos = yDest;
        this.xPixelPos = xDest * 64;
        this.yPixelPos = yDest * 64;
    }

    /**
     * Removes a captured piece from the board.
     */
    public void kill() {
        pieceList.remove(this);
    }

    /**
     * Finds and returns the piece at the specified pixel coordinates.
     */
    public static Piece getPieceAt(int x, int y, LinkedList<Piece> pieceList) {
        int xPos = x / 64;
        int yPos = y / 64;
        for (Piece p : pieceList) {
            if (p.xPos == xPos && p.yPos == yPos) {
                return p;
            }
        }
        return null;
    }

    /**
     * Checks if the path between the start and end position is clear (e.g., for Rooks, Bishops).
     */
    public boolean checkPath(int startX, int startY, int endX, int endY, Piece[][] board) {
        if (startX == endX || startY == endY) {
            // Horizontal or vertical move
            if (startX < endX) {
                for (int i = startX + 1; i < endX; i++) {
                    if (board[i][startY] != null) {
                        return false;
                    }
                }
            } else if (startX > endX) {
                for (int i = endX + 1; i < startX; i++) {
                    if (board[i][startY] != null) {
                        return false;
                    }
                }
            }
            if (startY < endY) {
                for (int i = startY + 1; i < endY; i++) {
                    if (board[startX][i] != null) {
                        return false;
                    }
                }
            } else if (startY > endY) {
                for (int i = endY + 1; i < startY; i++) {
                    if (board[startX][i] != null) {
                        return false;
                    }
                }
            }
        } else if (Math.abs(startX - endX) == Math.abs(startY - endY)) {
            // Diagonal move
            int dx = (endX > startX) ? 1 : -1;
            int dy = (endY > startY) ? 1 : -1;
            for (int i = 1; i < Math.abs(endX - startX); i++) {
                if (board[startX + i * dx][startY + i * dy] != null) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Abstract method to check if the move is valid for the specific piece type (e.g., King, Queen, etc.).
     */
    public abstract boolean isValidMove(int startX, int startY, int endX, int endY, Piece[][] board);

    /**
     * Abstract method to return a string representation of the piece (for GUI rendering or debugging).
     */
    @Override
    public abstract String toString();
    
    // Optional: You could add methods for GUI-related behavior, like rendering the piece on the board.
}


package pieces;
import VOGS.ChessBoard;


public abstract class Piece {
    public String color;
    
    public Piece (String color) {
        this.color = color;
    }

    /** 
     * Checks if a path between two positions is clear for a piece to move through.
    
     * @param startX The x-coordinate of the starting position
     * @param startY The y-coordinate of the starting position
     * @param endX   The x-coordinate of the target position
     * @param endY   The y-coordinate of the target position
     * @param board  The current chessboard
     * @return True if the path is clear, false otherwise.
     */
    
   
    
    public boolean checkPath(int startX, int startY, int endX, int endY, Piece [][] board){
        
        if(startX == endX || startY == endY){
            if (startX < endX){
                for(int i = startX + 1; i < endX; i++){
                    if (board[i][startY] != null){
                        return false;
                    }
                }
            }
            else if (startX > endX){
                for(int i = endX + 1; i < startX; i++){
                    if (board[i][startY] != null){
                        return false;
                    }
                }
            }
            if (startY < endY){
                for(int i = startY + 1; i < endY; i++){
                    if (board[startX][i] != null){
                        return false;
                    }
                }
            }
            else if (startY > endY){
                for(int i = endY + 1; i < startY; i++){
                    if (board[startX][i] != null){
                        return false;
                    }
                }
            }
        }
        // diagonal
        else if (Math.abs(startX - endX) == Math.abs(startY - endY)) {
            int dx = (endX > startX) ? 1 : -1;
            int dy = (endY > startY) ? 1 : -1;
    
            for (int i = 1; i < Math.abs(endX - startX); i++) {
                if (board[startX + i * dx][startY + i * dy] != null) return false;
            }
        }
        return true;    
    }



    // Add board as a parameter
    //Prototype for isValidMove for each indiviudal piece
    public abstract boolean isValidMove(int startX, int startY, int endX, int endY, Piece[][] board);

/**
     * Abstract method to return a string representation of the piece.
     * 
     * @return The string representation of the piece.
     */
    
    @Override
    public abstract String toString();

    
}


